q 0
[]
['S']
---expand---
q 0
[('S', 0)]
['a', 'S', 'b', 'S']
---momentary insuccess---
b 0
[('S', 0)]
['a', 'S', 'b', 'S']
---another try---
q 0
[('S', 1)]
['a', 'S']
---momentary insuccess---
b 0
[('S', 1)]
['a', 'S']
---another try---
q 0
[('S', 2)]
['c']
---advance---
q 1
[('S', 2), 'c']
[]
---success---
[('S', 2), 'c']
-------RESULT:-------
Sequence is accepted!

Parsing tree: 
idx val f  sibling
0  S  -1  -1
1  c  0  -1
