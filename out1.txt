q 0
[]
['S']
*---EXPAND---*
q 0
[('S', 0)]
['a', 'S', 'b', 'S']
*---ADVANCE---*
q 1
[('S', 0), 'a']
['S', 'b', 'S']
*---EXPAND---*
q 1
[('S', 0), 'a', ('S', 0)]
['a', 'S', 'b', 'S', 'b', 'S']
*---MOMENTARY INSUCCESS---*
b 1
[('S', 0), 'a', ('S', 0)]
['a', 'S', 'b', 'S', 'b', 'S']
*---ANOTHER TRY---*
q 1
[('S', 0), 'a', ('S', 1)]
['a', 'S', 'b', 'S']
*---MOMENTARY INSUCCESS---*
b 1
[('S', 0), 'a', ('S', 1)]
['a', 'S', 'b', 'S']
*---ANOTHER TRY---*
q 1
[('S', 0), 'a', ('S', 2)]
['c', 'b', 'S']
*---ADVANCE---*
q 2
[('S', 0), 'a', ('S', 2), 'c']
['b', 'S']
*---ADVANCE---*
q 3
[('S', 0), 'a', ('S', 2), 'c', 'b']
['S']
*---EXPAND---*
q 3
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 0)]
['a', 'S', 'b', 'S']
*---MOMENTARY INSUCCESS---*
b 3
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 0)]
['a', 'S', 'b', 'S']
*---ANOTHER TRY---*
q 3
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 1)]
['a', 'S']
*---MOMENTARY INSUCCESS---*
b 3
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 1)]
['a', 'S']
*---ANOTHER TRY---*
q 3
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 2)]
['c']
*---ADVANCE---*
q 4
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 2), 'c']
[]
*---SUCCESS---*
[('S', 0), 'a', ('S', 2), 'c', 'b', ('S', 2), 'c']
-------RESULT:-------
Sequence is accepted!

Parsing tree: 
idx val f  sibling
0  S  -1  -1
1  a  0  2
2  S  0  4
3  c  2  -1
4  b  0  5
5  S  0  -1
6  c  5  -1
